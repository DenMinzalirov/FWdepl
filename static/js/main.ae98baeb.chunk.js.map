{"version":3,"sources":["components/services/index.js","components/MapBlock/MapBlock.js","components/Modal.js","components/Wather/Wather.js","components/Controls/Controls.js","components/WeatherToday/WeatherToday.js","components/App/App.js","serviceWorker.js","index.js"],"names":["unsplashUrl","getBackgroundUrl","a","fetch","json","backgroundData","urls","regular","console","error","getWeatherByAddress","place","options","units","lang","url","toLowerCase","getWeatherByCoords","lat","lon","MapBlock","props","latitude","longitude","centr","weather","city","coord","convertCoordinate","coordinate","degrees","Math","trunc","minutes","abs","round","className","state","center","zoom","rand","random","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","MyModal","classes","React","useState","modalStyle","isGetWeather","open","setOpen","useEffect","handleOpen","body","style","id","Modal","onClose","aria-labelledby","aria-describedby","defaultState","backgroundUrl","isLoading","currentLocation","WeatherContext","createContext","store","Weather","fetchAll","setState","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","coords","handleLanguageChange","handleUnitsChange","handleAddressChange","this","cod","context","onRefresh","onLangChange","onUnitsChange","onAddressChange","Provider","value","backgroundImage","children","Component","refresh","color","transition","height","marginRight","formControl","selectEmpty","togleButton","borderColor","Controls","useContext","IconButton","onClick","FormControl","variant","Select","defaultValue","onChange","e","target","MenuItem","ToggleButtonGroup","exclusive","parentElement","aria-label","ToggleButton","TextField","placeholder","onKeyDown","key","Button","WeatherToday","Date","toLocaleTimeString","time","setTime","setInterval","name","list","main","temp","description","moment","grad","format","src","alt","toString","substring","dt_txt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ae98baeb.chunk.js","sourcesContent":["const UNSPLASH_ACCESS_KEY = `cjDp8Eu_-tcmdkj-GaR1LR0OmsTrsz8tqqkbJBJS0Fs`;\r\nconst unsplashUrl = `https://api.unsplash.com/photos/random?orientation=landscape&per_page=1&query=nature&client_id=${UNSPLASH_ACCESS_KEY}`;\r\nconst WEATHER_API_KEY = `a9a46a879917e21377a0e4454b33183b`;\r\n\r\nexport const getBackgroundUrl = async () => {\r\n    try {\r\n        const json = await fetch(unsplashUrl);\r\n        const backgroundData = await json.json();\r\n        return backgroundData?.urls?.regular;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};\r\nexport const getWeatherByAddress = async (place, options) => {\r\n    const { units, lang } = options;\r\n    const url = `https://api.openweathermap.org/data/2.5/forecast?q=${place}&lang=${lang.toLowerCase()}&units=${units}&APPID=${WEATHER_API_KEY}`;\r\n    try {\r\n        const json = await fetch(url);\r\n        return (await json.json());\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};\r\nexport const getWeatherByCoords = async ({ lat, lon }, options) => {\r\n    const { units, lang } = options\r\n    const url = `https://api.openweathermap.org/data/2.5/forecast?APPID=${WEATHER_API_KEY}&lat=${lat}&lon=${lon}&units=${units}&lang=${lang.toLowerCase()}`\r\n    try { \r\n        const json = await fetch(url)\r\n        return (await json.json())\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nexport const getCurrentLocation = () =>\r\n    new Promise((resolve, reject) => {\r\n        if ('geolocation' in navigator) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                const { latitude: lat, longitude: lon } = position.coords\r\n                resolve({ lat, lon })\r\n            }, (error) => reject(error));\r\n        } else {\r\n            reject('Not supported')\r\n        }\r\n    });\r\n// получаем координаты по названию населённого пункта\r\n// export const getCoordByPlace = async (place) => {\r\n//     const url = `https://api.opencagedata.com/geocode/v1/json?q=${place}&key=ccb1bee210a3442a9ed73889d1109649&pretty=1&no_annotations=1`;\r\n//     try {\r\n//         const json = await fetch(url);\r\n//         const res = await json.json();\r\n//         return res;\r\n//     } catch (error) {\r\n//         console.error(error);\r\n//     }\r\n// }\r\n","import React from 'react';\r\nimport './index.css'\r\nimport { YMaps, Map } from 'react-yandex-maps';\r\n\r\nconst MapBlock = (props) => {\r\n    let latitude = 'Latitude';\r\n    let longitude = 'Longitude';\r\n    if (props?.centr?.lang === 'RU') {\r\n        latitude = 'Широта';\r\n        longitude = 'Долгота';\r\n    }\r\n    let lat = 53.6506;\r\n    let lon = 23.8973;\r\n    if (props?.centr?.weather?.city?.coord) {\r\n        lat = props?.centr?.weather?.city?.coord.lat;\r\n        lon = props?.centr?.weather?.city?.coord.lon;\r\n    }\r\n    function convertCoordinate(coordinate) {\r\n        let degrees = Math.trunc(coordinate);\r\n        const minutes = Math.abs(Math.round((coordinate - degrees) * 60));\r\n        if (degrees === 0 && coordinate < 0) {\r\n            degrees = `-${degrees}`;\r\n        }\r\n        return `${degrees}°${minutes}′`;\r\n    }\r\n\r\n    return (\r\n        <div className='wrapper map-block'>\r\n            <YMaps>\r\n                <Map\r\n                    state={{ center: [lat, lon], zoom: 9 }}\r\n                />\r\n            </YMaps>\r\n            <div>\r\n                <p className='map-position'><span>{latitude}: {convertCoordinate(lat)}</span></p>\r\n                <p className='map-position'><span>{longitude}: {convertCoordinate(lon)}</span></p>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MapBlock;","import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\n\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\n\r\nexport default function MyModal(props) {\r\n    const classes = useStyles();\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n    const [open, setOpen] = React.useState(!props.isGetWeather);\r\n\r\n    useEffect(() => {\r\n        if (!props.isGetWeather) {\r\n            handleOpen();\r\n        }\r\n    }, [props.isGetWeather]);\r\n\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n            <h2 id=\"simple-modal-title\">City not found</h2>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\"\r\n        >\r\n            {body}\r\n        </Modal>\r\n    );\r\n}","import React, { Component } from 'react';\r\nimport { getBackgroundUrl, getWeatherByAddress, getCurrentLocation, getWeatherByCoords } from './../services/index';\r\nimport MapBlock from './../MapBlock/MapBlock';\r\nimport MyModal from './../Modal'\r\n\r\nconst defaultState = {\r\n    backgroundUrl: '',\r\n    weather: '',\r\n    isLoading: false,\r\n    error: null,\r\n    currentLocation: { lat: 53.6173806, lon: 23.817635 },\r\n    place: null,\r\n    lang: 'EN',\r\n    units: 'metric',\r\n};\r\nexport const WeatherContext = React.createContext({\r\n    store: defaultState,\r\n});\r\n\r\nexport class Weather extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = defaultState;\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.fetchAll();\r\n    };\r\n\r\n    componentDidCatch(error) {\r\n        this.setState({ error });\r\n    };\r\n\r\n    fetchAll = async () => {\r\n        const { lang, units, place } = this.state;\r\n        this.setState({ isLoading: true });\r\n        try {\r\n            const currentLocation = !place ? await getCurrentLocation() : this.state.weather.city.coord;\r\n            const backgroundUrl = await getBackgroundUrl();\r\n            const weather = place ?\r\n                await getWeatherByAddress(place, { lang, units }) :\r\n                await getWeatherByCoords(currentLocation, { lang, units });\r\n            this.setState({ backgroundUrl, weather, currentLocation });\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            this.setState({ isLoading: false });\r\n        };\r\n    }\r\n\r\n    handleLanguageChange = (lang) => this.setState({ lang }, () => this.fetchAll());\r\n    handleUnitsChange = (units) => this.setState({ units }, () => this.fetchAll());\r\n    handleAddressChange = (place) => this.setState({ place });\r\n\r\n    render() {\r\n        let isGetWeather = true;\r\n        if (this.state.weather?.cod === '404') {\r\n            isGetWeather = false;\r\n        }\r\n        const context = {\r\n            store: this.state,\r\n            onRefresh: this.fetchAll,\r\n            onLangChange: this.handleLanguageChange,\r\n            onUnitsChange: this.handleUnitsChange,\r\n            onAddressChange: this.handleAddressChange,\r\n        }\r\n        const { backgroundUrl } = this.state;\r\n        return (\r\n            <WeatherContext.Provider value={context}>\r\n                <div\r\n                    style={{ backgroundImage: `url(${backgroundUrl})` }}\r\n                    className=\"app-container\">\r\n                    {this.props.children}\r\n                    <MapBlock centr={this.state} />\r\n                    <MyModal isGetWeather={isGetWeather} />\r\n                </div>\r\n            </WeatherContext.Provider>\r\n        )\r\n    }\r\n}\r\n","import React, { useContext } from 'react';\r\nimport './index.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SyncIcon from '@material-ui/icons/Sync';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport { WeatherContext } from '../Wather/Wather';\r\n// import {getCoordByPlace} from '../services/index';\r\n// import {Autocomplete} from './Autocomplete/index';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    refresh: {\r\n        color: 'white',\r\n        border: '1px solid #fff',\r\n        transition: 'color 0.2s ease, background-color 0.2s ease, transform 0.3s ease',\r\n        boxShadow: `0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24)`,\r\n        height: '56px',\r\n        width: '56px',\r\n        marginRight: '10px',\r\n        '&:hover': {\r\n            transform: 'rotate(90deg)',\r\n        },\r\n    },\r\n    formControl: {\r\n        marginRight: '10px',\r\n        // margin: theme.spacing(1),\r\n        // minWidth: 80,\r\n        // position: 'relative',\r\n        // top: '-7px',\r\n        // color: 'white',\r\n    },\r\n    selectEmpty: {\r\n        // marginTop: theme.spacing(2),\r\n    },\r\n    togleButton: {\r\n        height: '56px',\r\n        color: 'white !important',\r\n        borderColor: 'white',\r\n    },\r\n}));\r\n\r\nexport const Controls = () => {\r\n    const classes = useStyles();\r\n    const context = useContext(WeatherContext);\r\n    const { store, onAddressChange, onRefresh, onLangChange, onUnitsChange } = context;\r\n    const { units } = store;\r\n\r\n    const handleLangChange = (e) => {\r\n        onLangChange(e.target.value);\r\n    };\r\n    const handleAddressChange = (e) => {\r\n        onAddressChange(e.target.value);\r\n    };\r\n    const handleUnitsChange = (e) => {\r\n        if (e.target.value) {\r\n            onUnitsChange(e.target.value);\r\n        } else {\r\n            onUnitsChange(e.target.parentElement.value);\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"controls-container\">\r\n            <div className='controls-btn wrapper'>\r\n                <IconButton\r\n                    className={classes.refresh}\r\n                    onClick={onRefresh}\r\n                >\r\n                    <SyncIcon />\r\n                </IconButton>\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                    <Select\r\n                        defaultValue='EN'\r\n                        className={classes.selectEmpty}\r\n                        onChange={handleLangChange}\r\n                    >\r\n                        <MenuItem value={'EN'}>EN</MenuItem>\r\n                        <MenuItem value={'RU'}>RU</MenuItem>\r\n                        <MenuItem value={'BY'}>BY</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n                <ToggleButtonGroup\r\n                    className=\"toggle-button-container\"\r\n                    value={units}\r\n                    exclusive\r\n                    onChange={handleUnitsChange}\r\n                    aria-label=\"units\"\r\n                >\r\n                    <ToggleButton className={classes.togleButton} value='metric' aria-label='metric'>\r\n                        &#8451;\r\n                </ToggleButton>\r\n                    <ToggleButton className={classes.togleButton} value='imperial' aria-label='imperial'>\r\n                        &#8457;\r\n                </ToggleButton>\r\n                </ToggleButtonGroup>\r\n            </div>\r\n            <div className='control-search wrapper'>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    className='search-panel'\r\n                    placeholder='Search city'\r\n                    onChange={handleAddressChange}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === \"Enter\") {\r\n                            onRefresh();\r\n                        }\r\n                    }}\r\n                />\r\n                <div className='mic-icon'>\r\n                    <MicIcon color='action' />\r\n                </div>\r\n                <Button\r\n                    className='btn-search'\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onClick={onRefresh}\r\n                // onClick={\r\n                //     console.log\r\n                //     async()=>{console.log(await getCoordByPlace('Гродно')) }\r\n                //     onPlaceByCoord\r\n                // }\r\n                >\r\n                    SEARCH\r\n                </Button>\r\n                {/* <Autocomplete\r\n                    onChange={onAddressChange}\r\n                /> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useState } from 'react';\r\nimport { WeatherContext } from '../Wather/Wather';\r\nimport './index.css';\r\nimport * as moment from 'moment';\r\nimport 'moment/locale/en-au';\r\nimport 'moment/locale/ru';\r\n// import 'moment/locale/en-au';\r\n\r\nconst WeatherToday = () => {\r\n    const context = useContext(WeatherContext);\r\n    const { store: { weather, lang, units } } = context;\r\n    const [time, setTime] = useState(new Date().toLocaleTimeString());\r\n    setInterval(() => {\r\n        setTime(new Date().toLocaleTimeString());\r\n    }, 1000);\r\n    if (weather.cod === '404') {\r\n        weather.city = { name: 'city not found' };\r\n        weather.list = [{ main: { temp: 'N/A' }, weather: [{ description: 'N/A' }] }];\r\n    }\r\n    moment.locale(['en-au', 'ru']);\r\n    if (lang === 'RU') {\r\n        moment.locale('ru');\r\n    }\r\n    let temp = 'Temperatur: ';\r\n    let description = 'Description: ';\r\n    if (lang === 'RU') {\r\n        temp = 'Температура: ';\r\n        description = 'Описание: ';\r\n    };\r\n    let grad = ' °C';\r\n    if (units === 'imperial') {\r\n        grad = ' °F';\r\n    };\r\n    return (\r\n        <div className='wrapper weather-block'>\r\n            <div className='weather-today'>\r\n                <div className='weather-today-info'>\r\n                    <div className='location'><span><h1>{weather ? weather.city.name : ''}</h1></span></div>\r\n                    <div className='date-app'>\r\n                        <span>{moment().format('LL')}</span>\r\n                        <br />\r\n                        <span>{time}</span>\r\n                    </div>\r\n                    <div className='weather-about'>\r\n                        <div>\r\n                            <span>{temp}{weather ? weather.list[0].main.temp : ''}{grad}</span>\r\n                            <br />\r\n                            <span>{description}{weather ? weather.list[0].weather[0].description : ''}</span>\r\n                        </div>\r\n                        <img src={`http://openweathermap.org/img/w/${'04d'}.png`} alt=\"\" />\r\n                    </div>\r\n                </div>\r\n                <div className='weather-today-icon'>\r\n                    <span><h2>{weather ? weather.list[0].main.temp.toString().substring(0, 2) : ''}{grad}</h2></span>\r\n                    <img src={`http://openweathermap.org/img/w/${'04d'}.png`} alt=\"\" />\r\n                </div>\r\n            </div>\r\n            <div className='weather-next-day'>\r\n                <div className='weather-next-day-item'>\r\n                    <span>{weather && weather.cod === '200' ? moment(weather.list[0 + 8].dt_txt).format('LL') : 'N/A'}</span>\r\n                    <span>{temp}{weather && weather.cod === '200' ? weather.list[0 + 8].main.temp : 'N/A'}{grad}</span>\r\n                    <span>{description}{weather && weather.cod === '200' ? weather.list[0 + 8].weather[0].description : 'N/A'}</span>\r\n                </div>\r\n                <div className='weather-next-day-item'>\r\n                    <span>{weather && weather.cod === '200' ? moment(weather.list[0 + 16].dt_txt).format('LL') : 'N/A'}</span>\r\n                    <span>{temp}{weather && weather.cod === '200' ? weather.list[0 + 16].main.temp : 'N/A'}{grad}</span>\r\n                    <span>{description}{weather && weather.cod === '200' ? weather.list[0 + 16].weather[0].description : 'N/A'}</span>\r\n                </div>\r\n                <div className='weather-next-day-item'>\r\n                    <span>{weather && weather.cod === '200' ? moment(weather.list[0 + 24].dt_txt).format('LL') : 'N/A'}</span>\r\n                    <span>{temp}{weather && weather.cod === '200' ? weather.list[0 + 24].main.temp : 'N/A'}{grad}</span>\r\n                    <span>{description}{weather && weather.cod === '200' ? weather.list[0 + 24].weather[0].description : 'N/A'}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherToday;\r\n","import React from 'react';\nimport './App.css';\n\nimport { Weather } from './../Wather/Wather';\nimport { Controls } from './../Controls/Controls';\nimport WeatherToday from './../WeatherToday/WeatherToday';\n\nconst App = () => {\n  return (\n    <Weather>\n      <Controls />\n      <WeatherToday />\n    </Weather>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}